apiVersion: v1
data:
  genesis.block: 


kind: Secret
metadata:
  name: hlf-genesis
  namespace: orderer
type: Opaque
